
struct DAQStringBuffer
    str::Vector{UInt8}
    size::UInt32
        function DAQStringBuffer(size::Int = 256)
            str = Vector{UInt8}(undef, size)
            size = UInt32(size)
            new(str,size)
        end
end

struct DAQDevice
    name::String
end

@enum ChannelTypes begin
    ALL = 0
    AI  = 1
    AO  = 2
    DI  = 3
    DO  = 4
    CI  = 5
    CO  = 6
end

const chantype_names = ["Analog Input",
                        "Analog Output",
                        "Digital Input",
                        "Digital Output",
                        "Counter Input",
                        "Counter Output"]


struct PhysicalChannel{T}
    name::String
    type::T
    parent::DAQDevice
    ranges::Union{Vector{Tuple{Float64,Float64}},Nothing}
end

struct TaskChannel{T}
    name::String
    type::T
    port::PhysicalChannel
    attr::OrderedDict
end

DefaultDev() = DAQDevice(lsdev(show=false)[1])

mutable struct DAQTask #TODO: create type hierarchy later
    name::String
    handle::TaskHandle
    channels::LittleDict{String, TaskChannel{T<:ChannelType}}
    devices::LittleDict{String, DAQDevice}

        function DAQTask(name::String)
            handleptr = Ref{TaskHandle}()
            if DAQmx.CreateTask(name, handleptr) !== DAQmx.Success
                throw("Something wrong.")
            else
                new(name, handleptr[])
            end
        end
end

DAQTask() = DAQTask("")


